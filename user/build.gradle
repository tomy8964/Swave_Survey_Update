plugins {
    id 'jacoco'
    id 'java'
    id 'org.springframework.boot' version '3.0.5'
    id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-groovy-templates'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-tomcat'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'com.h2database:h2'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    compileOnly 'org.projectlombok:lombok'
    implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'

    // WebClient
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // oAuth
    implementation group: 'com.auth0', name: 'java-jwt', version: '3.10.2'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client:'

    implementation 'com.mysql:mysql-connector-j'

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    implementation "com.squareup.okhttp3:okhttp:4.12.0"
    testImplementation "com.squareup.okhttp3:mockwebserver:4.12.0"
    testCompileOnly 'org.projectlombok:lombok' // 테스트 의존성 추가
    testAnnotationProcessor 'org.projectlombok:lombok' // 테스트 의존성 추가

    // mock server
    testImplementation 'org.mock-server:mockserver-netty:5.12.0'
    testImplementation 'org.mock-server:mockserver-client-java:5.12.0'
    testImplementation 'org.springframework.security:spring-security-test'

    //monitoring
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'

    //Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
    implementation 'jakarta.validation:jakarta.validation-api:3.0.0'
    implementation 'org.hibernate.validator:hibernate-validator:8.0.0.Final'


    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation('it.ozimov:embedded-redis:0.7.3') { exclude group: "org.slf4j", module: "slf4j-simple" }
    // 임베비드 레디스 추가
    testImplementation('org.redisson:redisson-spring-boot-starter:3.17.4')

}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacoco.exec")
    }
}

jacocoTestReport {
    reports {
        html.enabled true
        xml.enabled false
        csv.enabled true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "com/example/user/UserApplication*",
                    "com/example/user/user/domain/QUser",
                    "**/config/*"
            ])
        }))
    }

    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {

    violationRules { // 커버리지의 범위와 퍼센테이지를 설정합니다.
        rule {
            element = 'CLASS'

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.50
            }
        }
    }
}

jacoco {
    // JaCoCo 버전
    toolVersion = '0.8.8'
}